name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  tests:

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.11']

    runs-on: ${{ matrix.os }}

    env:
      POETRY_VIRTUALENVS_CREATE: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Poetry cache for Python dependencies
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Set up pre-commit cache
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: ${{ runner.os }}-pre-commit-

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: isort
        run: poetry run isort src tests

      - name: black
        run: poetry run black src tests

      - name: flake8
        run: poetry run flake8 src tests

      - name: pylint
        run: poetry run pylint src tests

      - name: Run unit tests
        run: poetry run pytest --verbose tests
